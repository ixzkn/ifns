from __future__ import print_function
import json, urllib, urllib2, argparse, socket, ssl, ConfigParser

configfile = "/etc/idns.conf"
config = ConfigParser.SafeConfigParser()
config.read(configfile)
apikey = config.get("client","apikey")
url = config.get("client","server")
newUserKey = config.get("server","new_user_key")
ctx = None

def getHosts():
    opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))
    opener.addheaders = [('X-Api-Key', apikey)]
    request = urllib2.Request(url)
    return json.loads(opener.open(request).read())

def newUser(email):
    opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))
    opener.addheaders = [('X-Api-Key', newUserKey)]
    request = urllib2.Request(url, data=email)
    request.get_method = lambda: 'POST'
    return opener.open(request).read()

def delHost(hostname):
    if hostname is None:
        hostname = socket.gethostname()
    opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))
    opener.addheaders = [('X-Api-Key', apikey)]
    request = urllib2.Request(url+hostname)
    request.get_method = lambda: 'DELETE'
    return opener.open(request).read()

def postHost(hostname=None):
    if hostname is None:
        hostname = socket.gethostname()
    opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))
    opener.addheaders = [('X-Api-Key', apikey)]
    request = urllib2.Request(url, data=hostname)
    request.get_method = lambda: 'POST'
    return opener.open(request).read()

def writeHosts(hostlist):
    """
    Hosts file is modified like follows:
        ####~idns-begin
        # Begin idns autogenerated
        <blabla>
        # End idns autogenerated
        ####~idns-end   
    Procedure:
        - if this secion exists, remove it by coping everything below it 
    """
    begin = 0
    end = 0
    afterend = ""
    with open("/etc/hosts","r") as contents:
        for line in iter(contents.readline, ''):
            if line.strip() == "####~idns-begin":
                begin = contents.tell()
            elif line.strip() == "####~idns-end":
                end = contents.tell()
                afterend = contents.read()
                break
    
    towrite = None
    if end <= begin:
        # unmodified hosts file, append
        towrite = open("/etc/hosts",'a')
    else:
        # modified hosts file, remove old and append
        towrite = open("/etc/hosts", "r+")
        towrite.seek(begin - len("\n####~idns-begin\n"))
        towrite.write(afterend)
        towrite.truncate();

    towrite.write("\n####~idns-begin\n# Begin idns autogenerated\n")
    # write the hosts...
    for host in hostlist:
        towrite.write("# %s - updated: %s\n" % (host['name'].strip(),host['timestamp']))
        towrite.write(host['address'].strip() + "    " + host['name'].strip() + "\n")

    towrite.write("\n# End idns autogenerated\n####~idns-end\n")
    towrite.close()

def printHosts(hostlist):
    for host in hostlist:
        print("# %s - updated: %s" % (host['name'].strip(),host['timestamp']))
        print(host['name'].strip(), host['address'].strip())

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="IDNS Client")
    parser.add_argument("action", choices=["get","put","refresh","delete","newuser"], help="Action to perform")
    parser.add_argument("-n", "--name", nargs=1, help="Hostname")
    parser.add_argument("-e", "--email", nargs=1, help="User creation email")
    args = parser.parse_args()
    actions = {
        'get': lambda: printHosts(getHosts()),
        'put': lambda: postHost(args.name[0]),
        'refresh': lambda: writeHosts(getHosts()),
        'delete': lambda: delHost(args.name[0]),
        'newuser': lambda: print(newUser(args.email[0]))
    }
    if args.action not in actions:
        parser.print_help()
    else:
        actions[args.action]()
